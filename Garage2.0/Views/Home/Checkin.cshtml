@model Garage2._0.Models.Vehicle
@{
    Layout = null;
}
<div class="modal fade" tabindex="-1" role="dialog" id="Modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Check In!</h4>
            </div>
            <div class="modal-body">
                @using (Ajax.BeginForm("Checkin", "Home", null, new AjaxOptions { OnSuccess = "FormSuccess" }, new { id = "modalForm", target = "_self" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.Owner, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Owner, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Owner, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RegNr, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.RegNr, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.RegNr, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.NumberOfWheels, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.NumberOfWheels, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NumberOfWheels, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.VehicleType, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EnumDropDownListFor(model => model.VehicleType, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.VehicleType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.InTime, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input type='text' class="form-control datepickercheckin" id='datetimepickerin' name="InTime" />
                                @{
                    if (TempData["ErrorMessage"] != "" || TempData["ErrorMessage"] != null)
                    {
                        <span class="text-danger field-validation-error">
                            @TempData["ErrorMessage"]
                        </span>
                    }
                                }
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.OutTime, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input type='text' class="form-control datepickercheckin" id='datetimepickerout' name="OutTime" />
                                @{
                    if (TempData["ErrorMessage"] != "" || TempData["ErrorMessage"] != null)
                    {
                        <span class="text-danger field-validation-error">
                            @TempData["ErrorMessage"]
                        </span>
                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <input type="submit" value="Check IN" class="btn btn-primary" form="modalForm" />
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<script>
    $('.datepickercheckin').datetimepicker();
</script>